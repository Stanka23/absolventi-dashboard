# -*- coding: utf-8 -*-
"""český komentář. ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tK0PhRL3S4pTLNVnzzovyFKy84x2OwDZ
"""

import pandas as pd
import pandas as pd
import plotly.express as px
import streamlit as st

# Load and prepare data directly within the script,
# příprava a načtení dat přímo ve skriptu(tex.soubor obsahujicí kód s instrukcí k provedení),
# soubor CSV ze kterého čerpá data(Absolventi....),
# TRY: ošetření chyb,
# DF: načte datový rámec z knihovny Pandas ze souboru
# st.error(...): Tato funkce z knihovny streamlit ujistí,že soubor je správném adresáři
# st.stop(): Tato funkce zastaví provádění skriptu
soubor = 'Absolventi_vysokých_škol_8931697613286264347závěr.práce.csv'
try:
    df = pd.read_csv(soubor)
except FileNotFoundError:
    st.error(f"Soubor '{soubor}' nebyl nalezen. Ujistěte se, že je soubor nahrán do stejného adresáře jako skript.")
    st.stop()

# Df_maly - pořadí sloupců
# Df_maly.colums - přejmenování sloupců
# copy() _ vytvoří nové vlastní data mnezávíslá na púvodním df
df_maly = df[[
    'Název vysoké školy',
    'Název fakulty nebo pracoviště',
    'Název studijního programu',
    'Počet absolventů v rámci Královéhradeckého kraje za rok 2022',
    'Název vyššího územního samosprávného celku',
    'Zeměpisná šířka v souřadnicovém systému WGS84',
    'Zeměpisná délka v souřadnicovém systému WGS84',
    'Název okresu',
    'Název obce'
]].copy() # Use .copy() to avoid SettingWithCopyWarning

df_maly.columns = ['skola', 'fakulta', 'program', 'absolventi', 'kraj', 'lat', 'lon', 'okres', 'obec']

# Handle potential non-numeric values and convert to numeric
# Převede sloupec 'absolventi' do číselné podoby. Pomocí NaN.
# NaN pak nahradí nulou a pak na celá čísla
# sloupec je připraven k dalším analýzám (výpočtům)
df_maly['absolventi'] = pd.to_numeric(df_maly['absolventi'], errors='coerce').fillna(0).astype(int)

# st.title(...) Funkce - zobrazuje hlavní nadpisy na web. stránkách Steamlit
# st.write(...) Funkce - zobrazuje text v obsahu běžného textu (informace textové)
# st.subheader(...) Funkce - zobrazující podnadpisy větší než běžný text
# základní textová struktůra aplikace Streamlit
st.title("Interaktivní dashboard absolventů VŠ v Královéhradeckém kraji")
st.write("Tento dashboard vizualizuje data o počtu absolventů vysokých škol v Královéhradeckém kraji za rok 2022. Data zahrnují informace o školách, fakultách, studijních programech a geografickém rozložení absolventů.")
st.subheader("Počet absolventů podle kritérií")

# Add interactive elements
# st.sidebar - určuje kam má být prvrk(nadpis) umístěn
# title - Funkce - hlavní nadpis
# filtry - text zobrazí v postranním panelu jako nadpis
st.sidebar.title("Filtry")

# Get unique values safely, handling potential NaNs
# Získání unikátních hodnot(Názvů škol)
# df_maly'skola¨-vybere konkrétní sloupec škol
# dropna - metoda - doplní not a number na Nan tak nebudoou prázdné seznamy
# unique - metoda - vrátí list jedinečných hodnot a uloží do proměnné available-školy
# st.sidebar.selectbox - rozbalí seznam
# st.siderbar - určuje umístění postranních panelů
# vybeete vysokou školu - argument - popisek rozbalený nad seznamem
# aveilabla - argument - seznam hodnot (zobrazí se jako možnosti)
# vybraná_škola - proměnná - hodnota se rozbalí v seznamu, vybere a uloží
available_skoly = df_maly['skola'].dropna().unique()
vybrana_skola = st.sidebar.selectbox(
    'Vyberte vysokou školu:',
    available_skoly
)

# Filter faculties based on selected school for the multiselect options
# Tento kód navazuje na předchozí výběr školy a umožňuje uživateli filtrovat data fakult, které patří k této škole
# st.sider.multiselect - funkce Steamlit - vytvoří vícenásobný výběr uživateli ze seznamu
# default=list(avvilable_fakulty) - Argument- nastavuje zaškrtnuté vícenásobné položky
available_fakulty = df_maly[df_maly['skola'] == vybrana_skola]['fakulta'].dropna().unique()
vybrane_fakulty = st.sidebar.multiselect(
    'Vyberte fakulty:',
    available_fakulty,
    default=list(available_fakulty) # Default to selecting all available faculties for the selected school
)

# Slider for filtering the number of graduates
# Celkový kód vytvoří interaktivní posuvník pro filtrování podle počtu absolventů
# minimální počez absolventů - popisek pro posuvník
# min_value=0 - nastavuje nejnižší hodnotu posuvníku = 0
# max_value=int - nastavuje maximální hodnotu posuvníku
# int() - výsledek převede na celé číslo
min_absolventi = st.sidebar.slider(
    'Minimální počet absolventů:',
    min_value=0,
    max_value=int(df_maly['absolventi'].max() if not df_maly['absolventi'].empty else 0),
    value=0

# Filter the dataframe based on selected criteria
# Kód celkově vezme původní data o absolventech a pomocí podmínek je filtuje jak uživatel nastavil pro
# konkrétní školu,vybranné fakulty v rámci školy, studijní programy i s minimálním počtem studentů
# 1. podmínka -(df_maly['skola'] == vybrana_skola): Vybere ty řádky ve sloupci 'skola'
# 2. podmínka -(df_maly['fakulta']
# .isin(vybrane_fakulty)) - metoda - kontroluje hodnotu ve sloupci fakulta
# 3. podmínka - (df_maly['absolventi'] >= min_absolventi) - vybere hodnoty ze sloubca absolventi větší, rovná se
# uložené v hodnotě a v proměnné min_absolvent neboli posuvníku
# df_filtered - nezávislá kopie filtrovaných dat zabrání problémům při ukládání
df_filtered = df_maly[
    (df_maly['skola'] == vybrana_skola) &
    (df_maly['fakulta'].isin(vybrane_fakulty)) &
    (df_maly['absolventi'] >= min_absolventi)
].copy()

# Display a warning if no data is available after filtering
# Celkový kód zkontroluje zda po filtrování dat nějaká data zbyla
# Pokud né, informuje varovnou zprávou
# Pokud ano, naznačí, že je připravena izualizovat.
# df-filtered.empty - zobrazí se varovná zpráva
# if - se provede pokud df_filterred neopsahuje řádky
# esle - pokračuje s vizualizací
# pass - zástupný příkaz a nedělá nic, je pro blok else ten nemůže být prázdný - příkaz z pythonu
if df_filtered.empty:
    st.warning("Pro vybrané filtry nejsou k dispozici žádná data.")
else:
    # Plotting based on filtered data

    # 1. Bar chart by faculty
    # Kód vytváří sloupcový graf pro zobrazení počtu absolventů podle fakult
    # použili jsme i Plotly.express to je část knihovny v pythonu
    # df_filtered - seskupí data pro každou fakultu do sloupce absolventi
    # index - ten vytvoří celkový součet pro každou fakultu
    # Fig_fakulty = px.bar - jádro vizualizace s plotly(px)
    # px.bar - vytváří sloupcový graf, x,y vykreslí osy grafu, title - nastavení nadpisu
    # labels - nastavení srozumitelnějších popisků os a legendy grafu, color - zvolení barevnosti sloupců a názvů fakult,
    # fig_fak - Dolazení vzhledu grafu. Upravuje zde styl hlavního nadpisu grafu, aby byl větší, černý, tučný atd..
    # st.plotly_chart(fig_fakulty): Streamlit funkce, která vezme Plotly graf  a vloží ho do webové stránky. Streamlit se postará o správné vykreslení interaktivního grafu.
    absolventi_podle_fakulty_filtered = df_filtered.groupby('fakulta')['absolventi'].sum().reset_index()
    fig_fakulty = px.bar(
        absolventi_podle_fakulty_filtered,
        x='fakulta',
        y='absolventi',
        title='POČET ABSOLVENTŮ PODLE FAKULT',
        labels={'fakulta': 'Fakulta', 'absolventi': 'Počet absolventů'},
        color='fakulta'
    )
    fig_fakulty.update_layout(title={'text': 'POČET ABSOLVENTŮ PODLE FAKULT', 'font': {'size': 18, 'color': 'black', 'family': 'Arial', 'weight': 'bold'}})
    st.plotly_chart(fig_fakulty)

    # 2. Horizontal Bar chart by program
    # Horizontální sloupcový graf s vodorovnými sloupci pro zobrazení počtu absolventů podle studijního programu
    # height=max(400, 30 * len(absolventi_podle_programu_filtered)): Toto je chytrý způsob, jak nastavit výšku grafu.
    # Pokud je programů málo, výška bude minimálně 400 pixelů. Pokud je jich hodně, výška se zvětší o 30 pixelů za každý další program, aby se sloupce nepřekrývaly a graf byl čitelný.
    # len(absolventi_podle_programu_filtered) vrací počet řádků (tedy počet unikátních programů) v datovém rámci pro graf
    # Celkově tento kód analyzuje filtrovaná data, spočítá absolventy pro každý studijní program, vytvoří z toho interaktivní horizontální sloupcový graf s dynamickou výškou a upraveným nadpisem a zobrazí ho v dashboardu.
    absolventi_podle_programu_filtered = df_filtered.groupby('program')['absolventi'].sum().reset_index()
    fig_programy_bar = px.bar(
        absolventi_podle_programu_filtered,
        x='absolventi',
        y='program',
        title='POČET ABSOLVENTŮ PODLE STUDIJNÍHO PROGRAMU (SLOUPCOVÝ GRAF)',
        labels={'program': 'Studijní program', 'absolventi': 'Počet absolventů'},
        orientation='h',
        height=max(400, 30 * len(absolventi_podle_programu_filtered)), # Adjust height based on number of programs
        color='program'
    )
    fig_programy_bar.update_layout(title={'text': 'POČET ABSOLVENTŮ PODLE STUDIJNÍHO PROGRAMU (SLOUPCOVÝ GRAF)', 'font': {'size': 18, 'color': 'black', 'family': 'Arial', 'weight': 'bold'}})
    st.plotly_chart(fig_programy_bar)

    # 3. Treemap by program
    # Vytvoří stromovou mapu pomocí Plotly Express. Stromová mapa je typ hierarchické vizualizace, kde obdélníky jsou zanořené do sebe a jejich velikost odpovídá určité hodnotě.
    # path=['program']: Toto definuje hierarchii obdelníků. Zde každý obdélník eprezentuje jeden unikátní studijní program
    # values='absolventi': Toto určuje, velikost každého obdélníku
    # title a labels nastavují nadpis grafu a popisky pro interaktivní prvky (např. při najetí myší).
    # fig_programy_treemap.update_layout(...): Upraví styl nadpisu grafu, aby byl výraznější.
    # st.plotly_chart(fig_programy_treemap): Zobrazí vytvořenou interaktivní stromovou mapu na webové stránce Streamlit.
    fig_programy_treemap = px.treemap(
        df_filtered,
        path=['program'],
        values='absolventi',
        title='POČET ABSOLVENTŮ PODLE STUDIJNÍHO PROGRAMU (TREEMAP)',
        labels={'program': 'Studijní program', 'absolventi': 'Počet absolventů'}
    )
    fig_programy_treemap.update_layout(title={'text': 'POČET ABSOLVENTŮ PODLE STUDIJNÍHO PROGRAMU (TREEMAP)', 'font': {'size': 18, 'color': 'black', 'family': 'Arial', 'weight': 'bold'}})
    st.plotly_chart(fig_programy_treemap)

    # 4. Density heatmap by school and faculty
    # Celkově tento kód vizualizuje, které kombinace školy a fakulty mají nejvyšší počet absolventů, a to pomocí barvy. Je to způsob, jak identifikovat "horká místa" v datech.
    # z='absolventi': Toto je klíčový argument pro teplotní mapu.
    # color_continuous_scale='Hot': Udává jaká barevná škála se použije. 'Hot' je jednou z mnoha barevných škál v Plotly. Vyšší hodnoty budou tmavší/červenější/více "horké", nižší hodnoty budou světlejší/žlutější/více "studené".
    # fig_heatmap.update_layout(...): Upraví styl nadpisu mapy.
    # st.plotly_chart(fig_heatmap): Zobrazí vytvořenou interaktivní hustotní teplotní mapu na webové stránce Streamlit.
    df_2dhist_filtered = df_filtered.groupby(['skola', 'fakulta'])['absolventi'].sum().reset_index()
    fig_heatmap = px.density_heatmap(
        df_2dhist_filtered,
        x='skola',
        y='fakulta',
        z='absolventi',
        title='POČET ABSOLVENTŮ PODLE ŠKOLY A FAKULTY (HEATMAP)',
        labels={'skola': 'Vysoká škola', 'fakulta': 'Fakulta', 'absolventi': 'Počet absolventů'},
        color_continuous_scale='Hot'
    )
    fig_heatmap.update_layout(title={'text': 'POČET ABSOLVENTŮ PODLE ŠKOLY A FAKULTY (HEATMAP)', 'font': {'size': 18, 'color': 'black', 'family': 'Arial', 'weight': 'bold'}})
    st.plotly_chart(fig_heatmap)

    # 5. Scatter mapbox for spatial distribution
    # Celkově kód vizualizuje geografické rozložení absolventů na mapě, kde velikost a barva bodů ukazují počet absolventů v dané lokalitě. To umožňuje vidět, kde je koncentrace absolventů nejvyšší.
    # fig_map = px.scatter_mapbox(...): Vytvoří bodovou mapu nad mapovým podkladem pomocí Plotly Express.
    # scatter_mapbox je specifický typ grafu v Plotly, který umožňuje zobrazovat body na mapě světa pomocí zeměpisných souřadnic.
    # lat='lat' a lon='lon': Tyto argumenty říkají Plotly, které sloupce obsahují zeměpisnou šířku (lat) a zeměpisnou délku (lon) pro umístění bodů na mapě.
    # hover_name='skola': Když uživatel najede myší na bod na mapě, zobrazí se popisek s názvem školy z tohoto sloupce.
    # size_max=15: Omezuje maximální velikost bodů, aby graf nebyl nepřehledný, i když jsou hodnoty 'absolventi' velmi vysoké.
    # fig_map.update_layout(margin=..., title=...): Další úprava vzhledu.
    # Nastavuje vnitřní okraje kolem mapy a opět definuje styl nadpisu mapy (text, velikost, barva, písmo). Opakování nastavení nadpisu zde zajišťuje, že se použije i s ostatními nastaveními rozložení.
    # st.plotly_chart(fig_map): Zobrazí vytvořenou interaktivní mapu v prostředí Streamlit. Uživatelé se mohou na mapě posouvat, přibližovat a oddalovat a vidět informace o bodech při najetí myší.
    st.subheader("Geografické rozložení")
    fig_map = px.scatter_mapbox(
        df_filtered.dropna(subset=['lat', 'lon']), # Drop rows with missing lat/lon for map
        lat='lat',
        lon='lon',
        size='absolventi',
        color='absolventi',
        hover_name='skola',
        size_max=15,
        zoom=10, # Adjusted zoom level for potentially wider distribution
        height=500,
        title='PROSTOROVÉ ROZLOŽENÍ ABSOLVENTŮ'
    )
    fig_map.update_layout(mapbox_style='open-street-map')
    fig_map.update_layout(margin={'r':0,'t':40,'l':0,'b':0},
        title={'text': 'PROSTOROVÉ ROZLOŽENÍ ABSOLVENTŮ', 'font': {'size': 18, 'color': 'black', 'family': 'Arial', 'weight': 'bold'}}
    )
    st.plotly_chart(fig_map)

!pip install nbconvert

!jupyter nbconvert --to script /content/Absolventi_vysokých_škol_8931697613286264347závěr.práce.ipynb

# Commented out IPython magic to ensure Python compatibility.
# %%writefile requirements.txt
# pandas
# plotly
# streamlit